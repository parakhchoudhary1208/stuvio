{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/parakhchoudhary/Desktop/stuvio/node_modules/%40gsap/react/src/index.js"],"sourcesContent":["/*!\n * @gsap/react 2.1.2\n * https://gsap.com\n *\n * Copyright 2008-2025, GreenSock. All rights reserved.\n * Subject to the terms at https://gsap.com/standard-license or for\n * Club GSAP members, the agreement issued with that membership.\n * @author: Jack Doyle, jack@greensock.com\n*/\n/* eslint-disable */\nimport { useEffect, useLayoutEffect, useRef } from \"react\";\nimport gsap from \"gsap\";\n\nlet useIsomorphicLayoutEffect = typeof document !== \"undefined\" ? useLayoutEffect : useEffect,\n    isConfig = value => value && !Array.isArray(value) && typeof(value) === \"object\",\n    emptyArray = [],\n    defaultConfig = {},\n    _gsap = gsap; // accommodates situations where different versions of GSAP may be loaded, so a user can gsap.registerPlugin(useGSAP);\n\nexport const useGSAP = (callback, dependencies = emptyArray) => {\n  let config = defaultConfig;\n  if (isConfig(callback)) {\n    config = callback;\n    callback = null;\n    dependencies = \"dependencies\" in config ? config.dependencies : emptyArray;\n  } else if (isConfig(dependencies)) {\n    config = dependencies;\n    dependencies = \"dependencies\" in config ? config.dependencies : emptyArray;\n  }\n  (callback && typeof callback !== \"function\") && console.warn(\"First parameter must be a function or config object\");\n  const { scope, revertOnUpdate } = config,\n        mounted = useRef(false),\n        context = useRef(_gsap.context(() => { }, scope)),\n        contextSafe = useRef((func) => context.current.add(null, func)),\n        deferCleanup = dependencies && dependencies.length && !revertOnUpdate;\n  deferCleanup && useIsomorphicLayoutEffect(() => {\n    mounted.current = true;\n    return () => context.current.revert();\n  }, emptyArray);\n  useIsomorphicLayoutEffect(() => {\n    callback && context.current.add(callback, scope);\n    if (!deferCleanup || !mounted.current) { // React renders bottom-up, thus there could be hooks with dependencies that run BEFORE the component mounts, thus cleanup wouldn't occur since a hook with an empty dependency Array would only run once the component mounts.\n      return () => context.current.revert();\n    }\n  }, dependencies);\n  return { context: context.current, contextSafe: contextSafe.current };\n};\nuseGSAP.register = core => { _gsap = core; };\nuseGSAP.headless = true; // doesn't require the window to be registered.\n"],"names":[],"mappings":"AAAA;;;;;;;;AAQA,GACA,kBAAkB;;;AAClB;AACA;;;AAEA,IAAI,4BAA4B,OAAO,aAAa,cAAc,6JAAA,CAAA,kBAAe,GAAG,6JAAA,CAAA,YAAS,EACzF,WAAW,CAAA,QAAS,SAAS,CAAC,MAAM,OAAO,CAAC,UAAU,OAAO,UAAW,UACxE,aAAa,EAAE,EACf,gBAAgB,CAAC,GACjB,QAAQ,gJAAA,CAAA,UAAI,EAAE,sHAAsH;AAEjI,MAAM,UAAU,CAAC,UAAU,eAAe,UAAU;IACzD,IAAI,SAAS;IACb,IAAI,SAAS,WAAW;QACtB,SAAS;QACT,WAAW;QACX,eAAe,kBAAkB,SAAS,OAAO,YAAY,GAAG;IAClE,OAAO,IAAI,SAAS,eAAe;QACjC,SAAS;QACT,eAAe,kBAAkB,SAAS,OAAO,YAAY,GAAG;IAClE;IACC,YAAY,OAAO,aAAa,cAAe,QAAQ,IAAI,CAAC;IAC7D,MAAM,EAAE,KAAK,EAAE,cAAc,EAAE,GAAG,QAC5B,UAAU,CAAA,GAAA,6JAAA,CAAA,SAAM,AAAD,EAAE,QACjB,UAAU,CAAA,GAAA,6JAAA,CAAA,SAAM,AAAD,EAAE,MAAM,OAAO;mCAAC,KAAQ;kCAAG,SAC1C,cAAc,CAAA,GAAA,6JAAA,CAAA,SAAM,AAAD;uCAAE,CAAC,OAAS,QAAQ,OAAO,CAAC,GAAG,CAAC,MAAM;uCACzD,eAAe,gBAAgB,aAAa,MAAM,IAAI,CAAC;IAC7D,gBAAgB;6CAA0B;YACxC,QAAQ,OAAO,GAAG;YAClB;qDAAO,IAAM,QAAQ,OAAO,CAAC,MAAM;;QACrC;4CAAG;IACH;6CAA0B;YACxB,YAAY,QAAQ,OAAO,CAAC,GAAG,CAAC,UAAU;YAC1C,IAAI,CAAC,gBAAgB,CAAC,QAAQ,OAAO,EAAE;gBACrC;yDAAO,IAAM,QAAQ,OAAO,CAAC,MAAM;;YACrC;QACF;4CAAG;IACH,OAAO;QAAE,SAAS,QAAQ,OAAO;QAAE,aAAa,YAAY,OAAO;IAAC;AACtE;AACA,QAAQ,QAAQ,GAAG,CAAA;IAAU,QAAQ;AAAM;AAC3C,QAAQ,QAAQ,GAAG,MAAM,+CAA+C","ignoreList":[0],"debugId":null}}]
}